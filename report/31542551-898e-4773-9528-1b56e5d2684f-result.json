{"name": "test01_app_login[13812345678-246811]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <scripts.test03_app.TestApp object at 0x000001CB0FE8F940>, mobile = '13812345678', code = '246811'\n\n    @pytest.mark.parametrize(\"mobile,code\", read_yaml(\"app_login.yaml\"))\n    def test01_app_login(self, mobile, code):\n        # 1. 调用登录接口\n        r = self.app.api_app_login(mobile, code)\n        try:\n            # 2. 提取token值\n>           Tool.common_token(r)\n\nscripts\\test03_app.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntool\\tool.py:12: in common_token\n    token = response.json().get(\"data\").get(\"token\")\nvenv\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nD:\\python3.7.0\\lib\\json\\__init__.py:348: in loads\n    return _default_decoder.decode(s)\nD:\\python3.7.0\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x000001CB0F1D0860>\ns = '<html>\\r\\n<head><title>404 Not Found</title></head>\\r\\n<body>\\r\\n<center><h1>404 Not Found</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\python3.7.0\\lib\\json\\decoder.py:355: JSONDecodeError"}, "attachments": [{"name": "log", "source": "e8a4a761-e1be-4e41-91b7-628edb113953-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "mobile", "value": "'13812345678'"}, {"name": "code", "value": "'246811'"}], "start": 1612504609932, "stop": 1612504610002, "uuid": "ebfddf78-f045-4e14-85c3-86eb92cd12eb", "historyId": "a8faa4a7815a406057569dff1a6601d9", "testCaseId": "1783911a5b8cff023364582bb6f1123c", "fullName": "scripts.test03_app.TestApp#test01_app_login", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test03_app"}, {"name": "subSuite", "value": "TestApp"}, {"name": "host", "value": "DESKTOP-0Q83GN5"}, {"name": "thread", "value": "4324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test03_app"}]}